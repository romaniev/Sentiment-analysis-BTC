# -*- coding: utf-8 -*-
"""Sentiment analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KtRD-HhgohBJbzecyrhV4Ai6WX0aEfHm
"""

#Import libraries
import tweepy 
from textblob import TextBlob
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#upload login file
from.google.colab impor files
files.uploda

#Store the data
log=pd.read.csv('Login.csv')

#Get twitter api credential
consumerKey =log["key"][0]
consumerSecret = log["Key"][1]
accessToken=log["key"][2]
accessTokenSecret = log["key"][3]

#Create the authentication object
authenticate=tweepy.OAuthHandler(consumerKey,consumerSecret)
#Set the access token and access token secret
authenticate.set._access_token(accessToken,accessTokenSecret)
#Create the API
api=tweepy.API(authenticate,wait_on_rate_limit=True)

#Gather 2000 tweets about BTC and filter any retweets
search_term ='#bitcoin -filter:retweets'
#Create a cursor object
tweets=tweepy.Cursor(api.search, q=search_term, lang='en', since='2018-11-01', tweet_mode='extended').items(2000)
#Store tweets in a variable and get full text
all_teewts = [tweet.full_text fot tweet in tweets]

#Create a dataframe to store the tweet
df = pd.DataFrame(all_tweets, columns=['Tweets'])
df.head(5)

#Clean function to clean the tweets
def cleanTwt(twt):
  twt=re.sub('#bitcoin','bitcoin', twt)
  twt=re.sub('#Bitcoin','Bitcoin', twt)
  twt=twt.re.sub('#[A-Za-z0-9]+')
  twt=re.sub('\\n','',twt)
  return twt

#Clean the tweets
df['Clean_Tweets']=df['Tweets'].apply(cleanTwt)
#Show df
df.head()

#Create a function to get subjectivity or objectivitu=y
def getSubjectivity(twt):
  return TextBlob(twt).sentiment.subjectivity

 def getPolarity(twt):
  return TextBlob(twt).sentiment.polarity

#Create 2 column called subjectivity and polarity
df['Subjectivity']=df['Cleaned_Tweets'].apply(getSubjectivity)
df['Polarity']=df['Cleaned_Tweets'].apply(getPolarity)

#Show data
df.head()

#Create a function to get the sentiment text
def getSentiment(score):
  if score <0:
    return 'Negative'
  elif score ==0:
    return 'Neutral' 
  else:
    return 'Positive

#Create a column to store sentiment text
df['Sentiment']=df['Polarity'].apply(getSentiment)
#show data
df.head()

#Create a scatter plot to show subjectiviti and polarity
plt.figure(figsize=(8,6))
for i in range(0,df.shape[0]):
  plt.scatter(df['Polarity'][i],df['Subjectivity'][i], color='Purple')
 plt.title('sentiment analysis')
 plt.xlabel('Polarity') 
 plt.ylabel('Subjectivity|(objective to subjective')
 plt.show()

#create a bar chart of tweets
df['Sentiment'].value_counts().plot(kind='bar')
 plt.title('Sentiment analysis')
 plt.xlabel('Sentiment') 
 plt.ylabel('Number of tweets')
 plt.show()
